import { makeAutoObservable } from "mobx";
import _ from "lodash";

const AVAILABLE_NUMBER_FORMAT_VARIANTS = {
    CURRENCY: "CURRENCY",
    NONE: "NONE",
    PERCENTAGE: "PERCENTAGE",
    NONFORMATTED: "NONFORMATTED",
};

const POSITION = {
    TOP: "top",
    BOTTOM: "bottom",
    ABOVE: "above",
    BELOW: "below",
};

const INDICATOR_TYPE = {
    BASIC: "BasicIndicator",
    CLASSIC: "ClassicIndicator",
};

const DIGIT_CAPACITY = {
    NONE: "NO",
    MEGA: "MEGA",
    KILO: "KILO",
};

const EMPTY_KEY = "No";

const formatSeparators = (format, value) => value.toString();

class IndicatorStore {
    progressBarKeys = {
        showCurrentValue: true,
        showBounds: true,
        showPercentageLabel: true,
        showTargets: true,
        radioBounds: "static",
        radioTargets: "static",
        cubeBounds: [EMPTY_KEY, EMPTY_KEY],
        cubeTargets: [EMPTY_KEY, EMPTY_KEY],
        staticBounds: ['0', 100],
        staticTargets: ['0', 70],
        color: ["#00a2b7", "#d3d3d3", "#0000ff", "#0000ff"],
        currentValueLabelPosition: 'top',
        targetsLabelPosition: 'bottom',
        indicatorType: INDICATOR_TYPE.CLASSIC,
    };

    inputCurrentValue = "44";
    indicatorSize = "large";

    constructor() {
        makeAutoObservable(this);
        this.changeCurrentValue = this.changeCurrentValue.bind(this);
        this.changeProgressBarKey = this.changeProgressBarKey.bind(this);
        this.changeIndicatorSize = this.changeIndicatorSize.bind(this);
    }

    get formattedProgressBarData() {
        const {
            radioBounds,
            radioTargets,
            cubeBounds: [bottom, top],
            cubeTargets: [first, second],
            staticBounds: [bottomStatic, topStatic],
            staticTargets: [firstStatic, secondStatic],
        } = this.progressBarKeys;

        const format = AVAILABLE_NUMBER_FORMAT_VARIANTS.PERCENTAGE;

        const getCubesValue = (cubeKey, radioKey, staticValue, formatType) => {
            const isPercentage =
                formatType === AVAILABLE_NUMBER_FORMAT_VARIANTS.PERCENTAGE;
            const value = staticValue;
            const formattedValue = isPercentage ? `${value}%` : value;

            return { value, formattedValue };
        };

        const topVal = getCubesValue(top, radioBounds, topStatic, format);
        const bottomVal = getCubesValue(
            bottom,
            radioBounds,
            bottomStatic,
            format,
        );
        const firstVal = getCubesValue(
            first,
            radioTargets,
            firstStatic,
            format,
        );
        const secondVal = getCubesValue(
            second,
            radioTargets,
            secondStatic,
            format,
        );

        return [
            {
                topBound: topVal.value,
                topBoundFormatted: topVal.formattedValue,
                bottomBound: bottomVal.value,
                bottomBoundFormatted: bottomVal.formattedValue,
                firstTarget: firstVal.value,
                firstTargetFormatted: firstVal.formattedValue,
                secondTarget: secondVal.value,
                secondTargetFormatted: secondVal.formattedValue,
            },
        ];
    }

    get currentValue() {
        return this.inputCurrentValue;
    }

    changeCurrentValue(newValue) {
        this.inputCurrentValue = newValue;
    }

    changeIndicatorSize(newSize) {
        this.indicatorSize = newSize;
    }

    updateProgressBarKeys(newKeys) {
        this.progressBarKeys = {
            ...this.progressBarKeys,
            ...newKeys,
        };
    }

    changeProgressBarKey(propertyName, value, index) {
        const arrayContent = [
            "cubeBounds",
            "cubeTargets",
            "staticBounds",
            "staticTargets",
            "color"
        ];

        if (arrayContent.includes(propertyName)) {
            this.progressBarKeys[propertyName][index] = value;
        } else {
            this.progressBarKeys[propertyName] = value;
        }
    }

    getCubesValue = (cubeKey, radioKey, staticValue, formatType) => {
        const isPercentage = false
        //const isPercentage = formatType === AVAILABLE_NUMBER_FORMAT_VARIANTS.PERCENTAGE;
        const value = staticValue;
        const formattedValue = isPercentage ? `${value}%` : value;
        return { value, formattedValue };
    };

    get progressBarDatum() {
        const {
            radioBounds,
            radioTargets,
            cubeBounds: [bottom, top],
            cubeTargets: [first, second],
            staticBounds: [bottomStatic, topStatic],
            staticTargets: [firstStatic, secondStatic],
        } = this.progressBarKeys;

        const format = AVAILABLE_NUMBER_FORMAT_VARIANTS.PERCENTAGE;

        const topVal = this.getCubesValue(top, radioBounds, topStatic, format);
        const bottomVal = this.getCubesValue(
            bottom,
            radioBounds,
            bottomStatic,
            format,
        );
        const firstVal = this.getCubesValue(
            first,
            radioTargets,
            firstStatic,
            format,
        );
        const secondVal = this.getCubesValue(
            second,
            radioTargets,
            secondStatic,
            format,
        );

        const result = {
            topBound: Number( topVal.value ),
            topBoundFormatted: topVal.formattedValue,
            bottomBound: Number( bottomVal.value ),
            bottomBoundFormatted: bottomVal.formattedValue,
            firstTarget: Number( firstVal.value ),
            firstTargetFormatted: firstVal.formattedValue,
            secondTarget: Number( secondVal.value ),
            secondTargetFormatted: secondVal.formattedValue,
        }


        console.log(result, 'RES')

        return result;
    }
}

export const indicatorStore = new IndicatorStore();
